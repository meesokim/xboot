/*
 * start.S
 *
 * Copyright(c) 2007-2020 Jianjun Jiang <8192542@qq.com>
 * Official site: http://xboot.org
 * Mobile phone: +86-18665388956
 * QQ: 8192542
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 */

#include <xconfigs.h>

.macro save_regs
	str lr, [sp, #-4]
	mrs lr, spsr_all
	str lr, [sp, #-8]
	str r1, [sp, #-12]
	str r0, [sp, #-16]
	mov r0, sp
	cps #0x13
	ldr r1, [r0, #-4]
	str r1, [sp, #-4]!
	ldr r1, [r0, #-8]
	str r1, [sp, #-(4 * 16)]
	ldr r1, [r0, #-12]
	ldr r0, [r0, #-16]
	stmdb sp, {r0 - r14}^
	sub sp, sp, #(4 * 16)
	ldr r4, [sp]
	and r0, r4, #0x1f
	cmp r0, #0x10
	beq 10f
	cmp r0, #0x13
	beq 11f
	b .
11:	add r1, sp, #(4 * 17)
	str r1, [sp, #(4 * 14)]
	str lr, [sp, #(4 * 15)]
10:	add r1, sp, #(4 * 17)
	str r1, [sp, #-4]!
	mov r0, sp
.endm

.macro restore_regs
	mov r12, sp
	ldr sp, [r12], #4
	ldr r1, [r12], #4
	msr spsr_cxsf, r1
	and r0, r1, #0x1f
	cmp r0, #0x10
	beq 20f
	cmp r0, #0x13
	beq 21f
	b .
20:	ldr lr, [r12, #(4 * 15)]
	ldmia r12, {r0 - r14}^
	movs pc, lr
21:	ldm r12, {r0 - r15}^
	mov r0, r0
.endm

/*
 * Exception vector table
 */
.text
	.arm

	.global _start
_start:
	b reset
	ldr pc, _undefined_instruction
	ldr pc, _software_interrupt
	ldr pc, _prefetch_abort
	ldr pc, _data_abort
	ldr pc, _not_used
	ldr pc, _irq
	ldr pc, _fiq

_undefined_instruction:
	.word undefined_instruction
_software_interrupt:
	.word software_interrupt
_prefetch_abort:
	.word prefetch_abort
_data_abort:
	.word data_abort
_not_used:
	.word not_used
_irq:
	.word irq
_fiq:
	.word fiq

/*
 * The actual reset code
 */
reset:
	/* Enter svc mode cleanly and mask interrupts */
	mrs r0, cpsr
	eor r0, r0, #0x1a
	tst r0, #0x1f
	bic r0, r0, #0x1f
	orr r0, r0, #0xd3
	bne 1f
	orr r0, r0, #0x100
	adr lr, 2f
	msr spsr_cxsf, r0
	.word 0xe12ef30e /* msr elr_hyp, lr */
	.word 0xe160006e /* eret */
1:	msr cpsr_c, r0
2:	nop

    mov     r4, #0x80000000

    /* SVC stack (for SWIs) at 0x2000 */
    /* The processor appears to start in this mode, but change to it
     * anyway
     */
    cps     #0x13       /* Change to supervisor (SVC) mode */
    add     sp, r4, #0x2400

    /* ABORT stack at 0x2400 */
    cps     #0x17       /* Change to Abort mode */
    add     sp, r4, #0x2800

    /* IRQ stack at 0x2800 */
    cps     #0x12       /* Change to IRQ mode */
    ldr     sp, =__irq_stack_top__

    /* FIQ stack at 0x2c00 */
    cps     #0x11       /* Change to FIQ mode */
    ldr     sp, =__fiq_stack_top__

    /* System stack at 0x3000 */
    cps     #0x1f       /* Change to system mode */
    ldr     sp, =__c_stack_top__

    /* Stay in system mode from now on */

    /* Zero bss section */
    ldr     r0, =__bss_start__
    ldr     r1, =__bss_end__
    mov     r2, #0
bss_zero_loop:
    cmp     r0,r1
    it      lt
    strlt   r2,[r0], #4
    blt     bss_zero_loop

    /* Enable the FPU */
    mrc     p15, 0, r0, c1, c0, 2
    orr     r0, r0, #0x300000            /* single precision */
    orr     r0, r0, #0xC00000            /* double precision */
    mcr     p15, 0, r0, c1, c0, 2
    mov     r0, #0x40000000
    fmxr    fpexc, r0

    /* Turn on unaligned memory access */
    mrc     p15, #0, r4, c1, c0, #0
    orr     r4, #0x400000   /* 1<22 */
    mcr     p15, #0, r4, c1, c0, #0

    /* Enable MMU */
    ldr     r1, =ttbr0              // addr(TTBR0)

    ldr     r2, =0x0000040E
    mov     r3, #0                  // from 0x00000000
    mov     r4, #0x200              //   to 0x1FFFFFFF
    bl      set_pgtbl_entry

    ldr     r2, =0x00002416
    mov     r3, #0x200              // from 0x20000000 (incl. peripherals)
    mov     r4, #0x1000             //   to 0xFFFFFFFF
    bl      set_pgtbl_entry

    ldr     r2, =0x0000040E
    mov     r3, #0x480              // framebuffer at 0x48000000
    mov     r4, #0x490              // make 16 Mbyte cacheable
    bl      set_pgtbl_entry

    mov     r3, #3
    mcr     p15, #0, r3, c3, c0, #0 // set domain 0 to master

    mcr     p15, #0, r1, c2, c0, #0 // set TTBR0 (addr of ttbr0)  (ptblwlk inner non cacheable,
                                    // outer non-cacheable, not shareable memory)
    /* Start L1 Cache */
    mov     r3, #0
    mcr     p15, #0, r3, c7, c7, #0 /* Invalidate data cache and flush prefetch buffer */
    mcr     p15, #0, r3, c8, c7, #0 /* Invalidate TLB */
    mrc     p15, #0, r2, c1, c0, #0 /* Read Control Register Configuration Data */
    orr     r2, #0x00800000
    orr     r2, #0x00001000         /* Instruction */
    orr     r2, #0x00000800         /* Branch Prediction */
    orr     r2, #0x00000004         /* Data */
    orr     r2, #0x00000001
    mcr     p15, #0, r2, c1, c0, #0 /* Write Control Register Configuration Data */

    /* Enable interrupts */
    ldr     r4, =interrupt_vectors
    mcr     p15, #0, r4, c12, c0, #0
    cpsie   i

    /* Call constructors of all global objects */
    ldr     r0, =__init_array_start
    ldr     r1, =__init_array_end
globals_init_loop:
    cmp     r0, r1
    it      lt
    ldrlt   r2, [r0], #4
    blxlt   r2
    blt     globals_init_loop

    /* Jump to main */
	bl 		xboot_main	
    bl      main

    /* Hang if main function returns */
hang:
    b       hang

set_pgtbl_entry:
    lsl     r0, r3, #20             // = r3 * 0x100000 (1M)
    orr     r0, r2
    str     r0, [r1, r3, lsl #2]
    add     r3, #1
    cmp     r3, r4
    bne     set_pgtbl_entry
    mov     pc, lr

/*
 * Data memory barrier
 * No memory access after the DMB can run until all memory accesses before it
 * have completed
 */
dmb:
    mov     r0, #0
    mcr     p15, #0, r0, c7, c10, #5
    mov     pc, lr

/*
 * Data synchronisation barrier
 * No instruction after the DSB can run until all instructions before it have
 * completed
 */
dsb:
    mov     r0, #0
    mcr     p15, #0, r0, c7, c10, #4
    mov     pc, lr

/*
 * Clean and invalidate entire cache
 * Flush pending writes to main memory
 * Remove all data in data cache
 */
flush_cache:
    mov     r0, #0
    mcr     p15, #0, r0, c7, c14, #0
    mov     pc, lr

bad_exception:
	b 0
	
/*
 * Interrupt vectors table
 */
    .align  5
interrupt_vectors:
    b       bad_exception /* RESET */
    b       bad_exception /* UNDEF */
    b       interrupt_swi
    b       interrupt_prefetch_abort
    b       interrupt_data_abort
    b       bad_exception /* Unused vector */
    b       interrupt_irq
    b       fiq_vector /* FIQ */


	.align 5
interrupt_irq:	
irq:
	sub lr, lr, #4
	save_regs
	bl arm32_do_irq
	restore_regs

	.align 5
fiq_vector:	
fiq:
	sub lr, lr, #4
	save_regs
	bl arm32_do_fiq
	restore_regs
/*
 * Exception handlers
 */
	.align 5
undefined_instruction:
	sub lr, lr, #4
	save_regs
	bl arm32_do_undefined_instruction
	restore_regs

	.align 5
interrupt_swi:	
software_interrupt:
	sub lr, lr, #4
	save_regs
	bl arm32_do_software_interrupt
	restore_regs

	.align 5
interrupt_prefetch_abort:	
prefetch_abort:
	sub lr, lr, #4
	save_regs
	bl arm32_do_prefetch_abort
	restore_regs

	.align 5
interrupt_data_abort:	
data_abort:
	sub lr, lr, #8
	save_regs
	bl arm32_do_data_abort
	restore_regs

	.align 5
not_used:
	b .



    .section .data

    .align 14
ttbr0:
    .space  4 << 12                        // 4 bytes * 4096 entries

/*
 * The location of section
 */

 	.align 4
_image_start:
	.long __image_start
_image_end:
	.long __image_end
_data_start:
	.long __data_start
_data_end:
	.long __data_end
_bss_start:
	.long __bss_start__
_bss_end:
	.long __bss_end__
_stack_und_start:
	.long __stack_und_start
_stack_und_end:
	.long __stack_und_end
_stack_abt_start:
	.long __stack_abt_start
_stack_abt_end:
	.long __stack_abt_end
_stack_irq_start:
	.long __irq_stack_top__
_stack_irq_end:
	.long __stack_irq_end
_stack_fiq_start:
	.long __fiq_stack_top__
_stack_fiq_end:
	.long __stack_fiq_end
_stack_srv_start:
	.long __c_stack_top__
_stack_srv_end:
	.long __stack_srv_end
